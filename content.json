{"meta":{"title":"胖仔","subtitle":null,"description":"吃蛋塔","author":"WEI FANG","url":"https://fwcloud916.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-03-07T09:41:57.000Z","updated":"2020-03-08T11:08:05.537Z","comments":true,"path":"categories/index.html","permalink":"https://fwcloud916.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-07T09:38:44.000Z","updated":"2020-03-08T11:08:05.537Z","comments":true,"path":"tags/index.html","permalink":"https://fwcloud916.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker Container - 基本概念","slug":"docker-basic-container","date":"2020-02-21T16:00:00.000Z","updated":"2020-03-08T11:08:05.533Z","comments":true,"path":"2020/02/22/docker-basic-container/","link":"","permalink":"https://fwcloud916.github.io/2020/02/22/docker-basic-container/","excerpt":"Docker Container - 基本概念簡述 Docker Container 使用方式、基本常用指令 概念container 是根據 image 產生的，image 是根據 dockerfile 產生的，所以 container 包含什麼、有什麼功能都是依據 dockerfile 的內容所決定的 image 可以想像成 container 的規格、標準，每次使用相同的 image 開啟 container 的時候，可以確保執行的功能都會是一模一樣的","text":"Docker Container - 基本概念簡述 Docker Container 使用方式、基本常用指令 概念container 是根據 image 產生的，image 是根據 dockerfile 產生的，所以 container 包含什麼、有什麼功能都是依據 dockerfile 的內容所決定的 image 可以想像成 container 的規格、標準，每次使用相同的 image 開啟 container 的時候，可以確保執行的功能都會是一模一樣的 常用指令1docker container run [OPTIONS] IMAGE [COMMAND] [ARG...] 運行一個 nginx 1docker container run -p 8080:80 nginx 如果電腦上沒有 nginx 的 image 會從 docker 的儲存庫下載，預設通常是官方的 Docker Hub 上面這行指令中 -p 是 --port 的縮寫，傳入兩個參數，一個是主機的 port (8080) ，一個是 container 的（80），代表的意思是將 container 的 80 埠對應到主機的 8080 埠所以在主機的電腦上可以開啟瀏覽器輸入 localhost:8080 就會看到 container 開啟的 nginx 伺服器 如果要知道開啟的 port 是多少，基本上有三種方法 從 Docker Hub 上的說明中查詢 從 Docker Hub 上的 tag 中查詢 從 dockerfile 裡面查詢 EXPOSE 是 dockerfile 中的指令，代表服務對外開啟的 port 這邊可以開始感受到 dockerfile 是 image 的藍圖image 是 container 的樣板 所以在使用 image 的時候最好可以看到 dockerfile 才可以確保開啟的 container 有做什麼事情 1docker container run -v ~&#x2F;Documents&#x2F;demo:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -p 8080:80 nginx 這次加上 -v 是 --volume 的縮寫，代表綁定檔案目錄，藉由設置這個參數可以修改 container 中要執行的檔案，這邊綁定了 nginx 的預設目錄，就可以修改預設顯示的頁面了 其他還有許多參數可以設定 -d --detach 代表背景執行，執行後只會回傳 container ID -i --interactive 開啟互動模式，可以直接操作 container","categories":[{"name":"Docker","slug":"Docker","permalink":"https://fwcloud916.github.io/categories/Docker/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://fwcloud916.github.io/tags/w3HexSchool/"},{"name":"Docker","slug":"Docker","permalink":"https://fwcloud916.github.io/tags/Docker/"},{"name":"Docker Container","slug":"Docker-Container","permalink":"https://fwcloud916.github.io/tags/Docker-Container/"},{"name":"Container","slug":"Container","permalink":"https://fwcloud916.github.io/tags/Container/"}]},{"title":"Docker - 基本概念","slug":"docker-basic-concept","date":"2020-02-15T16:00:00.000Z","updated":"2020-03-08T11:08:05.533Z","comments":true,"path":"2020/02/16/docker-basic-concept/","link":"","permalink":"https://fwcloud916.github.io/2020/02/16/docker-basic-concept/","excerpt":"Docker - 基本概念簡述 Docker 架構、優勢、好處並與 VM 作比較","text":"Docker - 基本概念簡述 Docker 架構、優勢、好處並與 VM 作比較 建立環境建立一個 Web Service 的環境可能需要 Linux + Apache + MySQL + PHP (LAMP)又或者再加上 Nginx 組成 LNAMP 使用 VM一個環境就是一個完整的系統在獨立開發的時候，或許這個情況並不會造成困擾但是在團隊開發的時候，如果每個人都需要一個可以開發的環境 整個團隊共用一個環境 =&gt; 每個開發者互相影響 每個人有獨立的開發環境 =&gt; 很難確保每個人都有相同的環境 使用 DockerDocker 不需要自己的系統，Docker 的架構是建立在原有的系統上，使用原有系統的運算資源，只安裝需要的東西，相比基於硬體上的系統建立，Docker 建立的系統只是一個程式而已 所以 Docker 具有快速建立、轉移、複製的特性 不過即便透過 namespace 隔離，但因為與原系統共用 kernel，所以 Docker 也不像 VM 是完全隔離的系統 資源分配及建立限制VM 虛擬化硬體資源，執行自己的作業系統 可以建立任何環境， Linux 、 MAC OS 或是 Windows Docker Docker 使用原系統的 kernel 作為運算，不需要執行自己的作業系統 只能建立相同 kernel 的環境使用 Docker 帶來的優勢快速建立相同環境 當環境建立好之後（ image 、 Dockerfile ）可以在不同的機器直接部署、安裝 快速調整環境 只需要調整 image 或 Dockerfile 就可完成環境的變更 節省資源提升效能 不需要運行額外的作業系統，直接使用原本 kernel ，將資源更有效率的運用","categories":[{"name":"Docker","slug":"Docker","permalink":"https://fwcloud916.github.io/categories/Docker/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://fwcloud916.github.io/tags/w3HexSchool/"},{"name":"docker","slug":"docker","permalink":"https://fwcloud916.github.io/tags/docker/"}]},{"title":"利用 firebase 建立自己的 CORS Anywhere","slug":"CorsAnyWhere-by-firebase","date":"2020-02-08T16:00:00.000Z","updated":"2020-03-08T11:08:05.525Z","comments":true,"path":"2020/02/09/CorsAnyWhere-by-firebase/","link":"","permalink":"https://fwcloud916.github.io/2020/02/09/CorsAnyWhere-by-firebase/","excerpt":"利用 firebase 建立自己的 CORS Anywhere前言有時候在串接外部 API 或是公司內部的 API，都可能會遇到跨域存取 ( CORS ) 的問題 外部 API 因為安全性的問題所以會限制網域，需要透過後端取得資料來繞過這個驗證，但是開發時負責後端的人又都不肯幫忙先處理!? 串接內部 API 的時候，討人厭的後端 API 又不給我 localhost 使用，不然是要怎麼測試!","text":"利用 firebase 建立自己的 CORS Anywhere前言有時候在串接外部 API 或是公司內部的 API，都可能會遇到跨域存取 ( CORS ) 的問題 外部 API 因為安全性的問題所以會限制網域，需要透過後端取得資料來繞過這個驗證，但是開發時負責後端的人又都不肯幫忙先處理!? 串接內部 API 的時候，討人厭的後端 API 又不給我 localhost 使用，不然是要怎麼測試! 當遇到討厭的後端，不肯幫忙的後端，除了請其他願意幫忙的後端協助揍他以外，有時候也會透過一些服務來幫處理 CORS 的問題，例如: CORS Anywhere 除了利用別人提供的服務，要自己建立一個簡易 CORS Anywhere 也並非難事哩 簡易說明 借用 google 的力量，省去自架 server 的力氣 建立 firebase 專案 利用 Cloud functions 建立自己的 API 這支 API 的工作就是去取回外部 API 的資料並回傳 這就是你自己的 CORS Anywhere 設定 firebase要利用 Cloud functions 從外部 API 取回資料，需先更改收費方式費用不高，基本上不會超過免費額度 撰寫 functions快速建立 firebase 開發環境 (可參考 docs) 建立一個資料夾 開啟 command line 依序執行以下指令123npm install -g firebase-toolsfirebase loginfirebase init 依照指示就可以把專案建起來了! 編輯 index.jsCloud Functions 的基本架構是利用 Node.js 及 Express.js 建立的環境， index.js 就是 Cloud Functions 預設的路由 安裝使用到的套件 axios 12345# 進入 functions 目錄底下安裝cd functions# 存到 package.json 佈署時才會正確安裝npm install axios --save 12345678910111213141516const functions = require('firebase-functions');const axios = require('axios');exports.corsAnyWhere = functions.https.onRequest(async (req, res) =&gt; &#123; res.set('Access-Control-Allow-Origin', '*'); // 設定可以存取的網域 '*' 為不限制 res.set('Access-Control-Allow-Methods', 'GET'); // 設定可以接受的 request res.set('Access-Control-Allow-Headers', 'Content-Type') const getData = await axios(&#123; method: 'get', url: req.query.url //設定接受 query 參數 url ，接受要取的 api 網址，可依照需求增加 &#125;).then(async (response) =&gt; &#123; return res.send(response.data); &#125;).catch(err =&gt; &#123; return res.send('error: ' + err); &#125;)&#125;) 關於存取限制可以參考 MDN 伺服器端存取控制（CORS） 來做設定 佈署 functions輸入指令後就可以了!! 1firebase deploy --only functions 之後就可以在 Firebase &gt; Functions 中找到自己的 API url 來使用哩! 這裡也提供本文的範例程式碼","categories":[{"name":"firebase","slug":"firebase","permalink":"https://fwcloud916.github.io/categories/firebase/"}],"tags":[{"name":"CORS Anywhere","slug":"CORS-Anywhere","permalink":"https://fwcloud916.github.io/tags/CORS-Anywhere/"},{"name":"CORS","slug":"CORS","permalink":"https://fwcloud916.github.io/tags/CORS/"},{"name":"firebase","slug":"firebase","permalink":"https://fwcloud916.github.io/tags/firebase/"},{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://fwcloud916.github.io/tags/w3HexSchool/"}]},{"title":"NVM - Node Version Manager 安裝","slug":"NVM-inatall","date":"2019-03-18T16:00:00.000Z","updated":"2020-03-08T11:08:05.529Z","comments":true,"path":"2019/03/19/NVM-inatall/","link":"","permalink":"https://fwcloud916.github.io/2019/03/19/NVM-inatall/","excerpt":"由於 node 版本越來越多，新舊版本有時候因為套件支援版本不同無法使用，在開發與維護上都是不少人的困擾，所以就有 NVM 誕生，來解決版本切換的問題","text":"由於 node 版本越來越多，新舊版本有時候因為套件支援版本不同無法使用，在開發與維護上都是不少人的困擾，所以就有 NVM 誕生，來解決版本切換的問題 MACNVM 是由大神 Tim Caswell 所開發的一個專案，提供 linus/mac 使用的 Node 版本管理器，是目前最受歡迎的管理器 安裝方式1.開啟 terminal 或是 iterm2 ，使用 curl 來下載並安裝 (不建議使用 homebrew ) 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash 安裝完之後，會有安裝資訊 第一個紅框代表安裝的路徑( /Users/XXX/.nvm ) 第二個紅框代表命令引入的資訊在.bashrc之中 有可能會在 ~/.zshrc, ~/.profile, or ~/.bashrc 之中 在最後安裝完成時可以輸入 123export NVM_DIR=\"HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" 來直接載入 nvm 的指令，或是重新啟動 terminal 來載入 成功!! 常用指令 nvm run node [version] — 切換不同版本 nvm install [version] — 安裝不同版本 nvm ls — 查看已安裝的版本 nvm ls-remote — 查看可以安裝的版本 解除安裝方式輸入指令 1rm -rf $NVM_DIR ~/.npm ~/.bower 然後將命令資訊也刪掉 有可能會在 ~/.zshrc, ~/.profile, or ~/.bashrc 之中 就可以將nvm完全刪除囉! Windows雖然 NVM 並沒有提供 Windows 版本，不過還是有大神 Corey Butler 提供了 nvm-windows 為 Windows 提供一樣好用的 Node 版本管理器，而且安裝的方式相當簡單，可以在這個專案的 release 中下載安裝檔(.exe) 安裝方式下載 nvm-setup.zip 解壓縮就可以 GET 安裝檔(.exe)點兩下開始安裝!!! 基本上只要一直下一步就可以了!!! 選擇安裝路徑 選擇一個存放進入點(捷徑)的路徑並且會自動加入環境變數 就可順利安裝啦!!! 打開 cmder 測試一下( 命令提示字元 cmd 、 powershell 都可以使用) 輸入 : nvm -h 有跑出版本資訊與使用說明就是安裝成功啦! 一樣可以使用 nvm use [version] — 切換不同版本 nvm install [version] — 安裝不同版本 nvm list — 查看已安裝的版本 nvm list available — 查看可以安裝的版本 解除安裝方式利用 windows 的新增或移除程式刪除即可!! 註記 nvm 與 nvm-windows 是不同的套件","categories":[],"tags":[]}]}